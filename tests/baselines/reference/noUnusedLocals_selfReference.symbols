=== tests/cases/compiler/noUnusedLocals_selfReference.ts ===
export {}; // Make this a module scope, so these are local variables.

function f() { f; }
>f : Symbol(f, Decl(noUnusedLocals_selfReference.ts, 0, 10))
>f : Symbol(f, Decl(noUnusedLocals_selfReference.ts, 0, 10))

class C {
>C : Symbol(C, Decl(noUnusedLocals_selfReference.ts, 2, 19))

    m() { C; }
>m : Symbol(C.m, Decl(noUnusedLocals_selfReference.ts, 3, 9))
>C : Symbol(C, Decl(noUnusedLocals_selfReference.ts, 2, 19))
}
enum E { A = 0, B = E.A }
>E : Symbol(E, Decl(noUnusedLocals_selfReference.ts, 5, 1))
>A : Symbol(E.A, Decl(noUnusedLocals_selfReference.ts, 6, 8))
>B : Symbol(E.B, Decl(noUnusedLocals_selfReference.ts, 6, 15))
>E.A : Symbol(E.A, Decl(noUnusedLocals_selfReference.ts, 6, 8))
>E : Symbol(E, Decl(noUnusedLocals_selfReference.ts, 5, 1))
>A : Symbol(E.A, Decl(noUnusedLocals_selfReference.ts, 6, 8))

// Does not detect mutual recursion.
function g() { D; }
>g : Symbol(g, Decl(noUnusedLocals_selfReference.ts, 6, 25))
>D : Symbol(D, Decl(noUnusedLocals_selfReference.ts, 9, 19))

class D { m() { g; } }
>D : Symbol(D, Decl(noUnusedLocals_selfReference.ts, 9, 19))
>m : Symbol(D.m, Decl(noUnusedLocals_selfReference.ts, 10, 9))
>g : Symbol(g, Decl(noUnusedLocals_selfReference.ts, 6, 25))

// Does not work on private methods.
class P { private m() { this.m; } }
>P : Symbol(P, Decl(noUnusedLocals_selfReference.ts, 10, 22))
>m : Symbol(P.m, Decl(noUnusedLocals_selfReference.ts, 13, 9))
>this.m : Symbol(P.m, Decl(noUnusedLocals_selfReference.ts, 13, 9))
>this : Symbol(P, Decl(noUnusedLocals_selfReference.ts, 10, 22))
>m : Symbol(P.m, Decl(noUnusedLocals_selfReference.ts, 13, 9))

P;
>P : Symbol(P, Decl(noUnusedLocals_selfReference.ts, 10, 22))

