=== tests/cases/conformance/interfaces/declarationMerging/twoGenericInterfacesWithDifferentConstraints.ts ===
interface A<T extends Date> {
>A : Symbol(A, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 0, 0), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 2, 1))
>T : Symbol(T, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 0, 12), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 4, 12))
>Date : Symbol(Date, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

    x: T;
>x : Symbol(A.x, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 0, 29))
>T : Symbol(T, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 0, 12), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 4, 12))
}

interface A<T extends Number> { // error
>A : Symbol(A, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 0, 0), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 2, 1))
>T : Symbol(T, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 0, 12), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 4, 12))
>Number : Symbol(Number, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

    y: T;
>y : Symbol(A.y, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 4, 31))
>T : Symbol(T, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 0, 12), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 4, 12))
}

module M {
>M : Symbol(M, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 6, 1))

    interface B<T extends A<Date>> {
>B : Symbol(B, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 8, 10), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 11, 5))
>T : Symbol(T, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 9, 16), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 13, 16))
>A : Symbol(A, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 0, 0), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 2, 1))
>Date : Symbol(Date, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

        x: T;
>x : Symbol(B.x, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 9, 36))
>T : Symbol(T, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 9, 16), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 13, 16))
    }

    interface B<T extends A<any>> { // error
>B : Symbol(B, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 8, 10), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 11, 5))
>T : Symbol(T, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 9, 16), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 13, 16))
>A : Symbol(A, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 0, 0), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 2, 1))

        y: T;
>y : Symbol(B.y, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 13, 35))
>T : Symbol(T, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 9, 16), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 13, 16))
    }
}

module M2 {
>M2 : Symbol(M2, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 16, 1), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 22, 1))

    interface A<T extends Date> {
>A : Symbol(A, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 18, 11))
>T : Symbol(T, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 19, 16))
>Date : Symbol(Date, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

        x: T;
>x : Symbol(A.x, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 19, 33))
>T : Symbol(T, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 19, 16))
    }
}

module M2 {
>M2 : Symbol(M2, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 16, 1), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 22, 1))

    interface A<T extends Number> { // ok, different declaration space from other M2.A
>A : Symbol(A, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 24, 11))
>T : Symbol(T, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 25, 16))
>Number : Symbol(Number, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

        y: T;
>y : Symbol(A.y, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 25, 35))
>T : Symbol(T, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 25, 16))
    }
}

module M3 {
>M3 : Symbol(M3, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 28, 1), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 34, 1))

    export interface A<T extends Date> {
>A : Symbol(A, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 30, 11), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 36, 11))
>T : Symbol(T, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 31, 23), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 37, 23))
>Date : Symbol(Date, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

        x: T;
>x : Symbol(A.x, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 31, 40))
>T : Symbol(T, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 31, 23), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 37, 23))
    }
}

module M3 {
>M3 : Symbol(M3, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 28, 1), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 34, 1))

    export interface A<T extends Number> { // error
>A : Symbol(A, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 30, 11), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 36, 11))
>T : Symbol(T, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 31, 23), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 37, 23))
>Number : Symbol(Number, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

        y: T;
>y : Symbol(A.y, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 37, 42))
>T : Symbol(T, Decl(twoGenericInterfacesWithDifferentConstraints.ts, 31, 23), Decl(twoGenericInterfacesWithDifferentConstraints.ts, 37, 23))
    }
}
